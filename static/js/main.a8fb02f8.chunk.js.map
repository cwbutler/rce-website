{"version":3,"sources":["components/LandingSplash/index.js","components/WhySection/index.js","components/WhatSection/index.js","components/HowSection/index.js","components/SubmitSection/index.js","containers/Landing.js","App.js","serviceWorker.js","index.js"],"names":["LandingSplash","react_default","a","createElement","id","WhySection","className","WhatSection","HowSection","alt","SubmitSection","state","name","email","phone","isDisabled","Boolean","_this","changeValue","key","event","setState","Object","defineProperty","target","value","type","this","onChange","placeholder","required","React","PureComponent","LandingPage","components_LandingSplash","components_WhySection","components_WhatSection","components_HowSection","src_components_SubmitSection","App","containers_Landing","Component","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a8fb02f8.chunk.js","sourcesContent":["import React from 'react';\nimport './index.scss';\n\nfunction LandingSplash() {\n  return (\n    <div id=\"landingSplash\">\n      <h1>Imagine the Unexpected</h1>\n    </div>\n  );\n}\n\nexport default LandingSplash;\n","import React from 'react';\nimport './index.scss';\n\nfunction WhySection() {\n  return (\n    <div id=\"why-section\">\n      <div className=\"wrap\">\n        <h1 id=\"header\" className=\"primary-color\">Why are we doing this?</h1>\n\n        <div className=\"section\">\n          <div className=\"box\">\n            <h2>55 mins</h2>\n            <h6>Avg. door to balloon</h6>\n          </div>\n\n          <div className=\"box\">\n            <h2>$20,000</h2>\n            <h6>Avg. Hospilization Cost</h6>\n          </div>\n\n          <div className=\"box\">\n            <h2 className=\"primary-color\">210,000</h2>\n            <h6 className=\"primary-color\">Repeat Heart Attacks Per Year</h6>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default WhySection;\n","import React from 'react';\nimport './index.scss';\n\nfunction WhatSection() {\n  return (\n    <div id=\"what-section\">\n      <div className=\"wrap\">\n        <h1 id=\"header\" className=\"primary-color\">What can we do?</h1>\n\n        <div className=\"section\">\n          <div className=\"box\">\n            <h2 className=\"reduceInterventions\">Reduce Invasive Interventions</h2>\n          </div>\n\n          <div className=\"box\">\n            <h2 className=\"saveLives\">Save More Lives</h2>\n          </div>\n\n          <div className=\"box\">\n            <h2 className=\"reduceCosts\">Reduce Hospital Costs</h2>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default WhatSection;\n","import React from 'react';\nimport './index.scss';\n\nfunction HowSection() {\n  return (\n    <div id=\"how-section\">\n      <div className=\"wrap\">\n        <h1 id=\"header\" className=\"primary-color\">How are we doing this?</h1>\n\n        <div className=\"box\">\n          <img alt=\"Wearable Tech\" className=\"wearableImg\" />\n\n          <div className=\"text\">\n            <h6>Wearable Tech</h6>\n            <p>\n              Quick write-up talking about the wearable tech and a little bit about how it will help\n              patients. Also add a little bit about the technology behind the wearable.\n            </p>\n          </div>\n        </div>\n\n        <div className=\"box\">\n          <div className=\"text\">\n            <h6>AI Cloud Technology</h6>\n            <p>\n              Quick write-up talking about the wearable tech and a little bit about how it will help\n              patients. Also add a little bit about the technology behind the wearable.\n            </p>\n          </div>\n\n          <img alt=\"AI Cloud Tech\" className=\"aiCloudTechImg\" />\n        </div>\n\n        <div className=\"box\">\n          <img alt=\"Triage App\" className=\"triageImg\"  />\n\n          <div className=\"text\">\n            <h6>Triage App</h6>\n            <p>\n              Quick write-up talking about the wearable tech and a little bit about how it will help\n              patients. Also add a little bit about the technology behind the wearable.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default HowSection;\n","import React from 'react';\nimport './index.scss';\n\nclass SubmitSection extends React.PureComponent {\n  state = {\n    name: '',\n    email: '',\n    phone: ''\n  };\n\n  render() {\n    return (\n      <div id=\"submit-section\">\n        <div className=\"wrap\">\n          <div id=\"header\">\n            <h1 className=\"primary-color\">Letâ€™s Save Lives Together</h1>\n            <h1 className=\"primary-color\">Invest Early to Save Early</h1>\n          </div>\n\n          <form>\n            <input\n              type=\"text\"\n              name=\"name\"\n              value={this.state.name}\n              onChange={this.changeValue('name')}\n              placeholder=\"Full Name\"\n              required\n            />\n\n            <input\n              type=\"email\"\n              name=\"email\"\n              value={this.state.email}\n              onChange={this.changeValue('email')}\n              placeholder=\"Email Address\"\n              required\n            />\n\n            <input\n              type=\"tel\"\n              name=\"phone\"\n              value={this.state.phone}\n              onChange={this.changeValue('phone')}\n              placeholder=\"Phone Number\"\n              required\n            />\n\n\n            <button type=\"submit\" name=\"sumbit\">\n              Submit\n            </button>\n          </form>\n        </div>\n      </div>\n    );\n  }\n\n  isDisabled = () => !Boolean(this.state.name) || !Boolean(this.state.email) || !Boolean(this.state.phone);\n\n  changeValue = (key) => (event) => this.setState({ [key]: event.target.value });\n}\n\nexport default SubmitSection;\n","import './Landing.css';\nimport React from 'react';\nimport LandingSplash from '../components/LandingSplash';\nimport WhySection from '../components/WhySection';\nimport WhatSection from '../components/WhatSection';\nimport HowSection from '../components/HowSection';\nimport SubmitSection from '../components/SubmitSection';\n\nclass LandingPage extends React.PureComponent {\n  render() {\n    return (\n      <div id=\"landing\">\n        <LandingSplash />\n        <WhySection />\n        <WhatSection />\n        <HowSection />\n        <SubmitSection />\n      </div>\n    );\n  }\n}\n\nexport default LandingPage;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Landing from './containers/Landing';\n\nclass App extends Component {\n  render() {\n    return (\n      <div id=\"app\">\n        <Landing />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}